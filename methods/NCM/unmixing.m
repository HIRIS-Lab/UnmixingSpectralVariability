function [TalphaPlus,Tsigma2r]= unmixing(y,MUr,Nmc,Nbi)

%------------------------------------------------------------------
% % SPECTRAL UNMIXING
% % by O. ECHES, N. DOBIGEON and J.-Y. TOURNERET 
% % IRIT/ENSEEIHT/TÈSA - France - 2007
% 
% INPUT
%       y        : the pixel to be unmixed
%       MUr    : the means of the spectra used in the mixture
%       Nmc      : number of MCMC iterations
%       Nbi      : number of burn-in iterations
%
% OUTPUT
%       TalphaPlus : the samples \alpha^+ generated by the procedure
%       Tsigma2r : the samples \sigma_r^2 generated by the procedure
%
%------------------------------------------------------------------


% number of spectral bands x number of endmember spectra
[L R] = size(MUr);

% initialization of the parameters

%hyperparameter : delta
delta = 1e-3;
% endmember variance    
sigma2r =(0.01)*ones(1,R);
% abundance vector
alphaPlus = ones(R,1)/R;

Trho = zeros(R,Nmc);
TalphaPlus = zeros(R,Nmc);
Tsigma2r = zeros(1,Nmc);

%useful quantities
sig = 5e-2*ones(1,R);
Tx = 0.3*ones(R,1);

%h = waitbar(0,'Sampling...','CreateCancelBtn','closereq', 'name', 'UNMIXING...');

% beginning
for m_compt=1:Nmc

    %waitbar(m_compt/Nmc,h)
            
    % updating the abundance coefficients
   [alphaPlus, rho,sig] = sample_alphaPlus(alphaPlus,y,MUr,sigma2r,m_compt,Tx,sig);
   % sig : variances for the random walk Gaussian distribution
   % rho : useful variable 
   TalphaPlus(:,m_compt) = alphaPlus; 
   Trho(:,m_compt) = rho;

   if rem(m_compt,100) == 0 
       % abundance vector acceptance rate for every 100 iterations
       Tx = mean(Trho(:,m_compt-99:m_compt),2);
   end    
   
   % updating the endmember variance
    sigma2r = sample_sigma2r(alphaPlus, MUr, y, delta);
    sigma2r = kron(sigma2r,ones(1,R));
   
    Tsigma2r(:,m_compt) = sigma2r(1);
     
  %updating the hyperparameter
  delta = gamrnd(R,inv(R./sigma2r(1)));
  
end

%close(h)

